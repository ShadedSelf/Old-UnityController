#pragma kernel Do
#pragma kernel Pre

struct H
{
	float4 posh;
	float4 col;
};

RWTexture2D<float> u;
RWTexture2D<float> v;
RWTexture2D<float4> dir;

Texture2D<float> ground;
Texture2D<float> stiff;

RWStructuredBuffer<H> buff;

float3 pos;
float3 position;
float2 scale;
int2 num;
float damp;
float radius;
float grav;
float waterLVL;
float lvlT;
float dT;
float wall;

uint3 idt;

uint2 Clamper(int2 number)
{
	uint2 temp = uint2(clamp(number, 0, num - 1));
	return (ground[temp] < .5) ? temp : idt.xy;
}

[numthreads(8, 8, 1)]
void Do(uint3 id : SV_DispatchThreadID)
{
	idt = id;
	float currX = u[Clamper(id.xy + int2(1, 0))];
	float currY = u[id.xy];
	float currZ = u[Clamper(id.xy + int2(0, 1))];

	float tt = 0;
	for (int xt = -1; xt < 2; xt += 2)
	{
		tt += u[Clamper(id.xy + int2(xt, 0))];
		tt += u[Clamper(id.xy + int2(0, xt))];
		for (int zt = -1; zt < 2; zt += 2)
		{
			tt += u[Clamper(id.xy + int2(xt, zt))] / 4;
		}
	}

	tt = tt / 5 - u[id.xy];
	v[id.xy] += tt * dT;
	v[id.xy] *= /*stiff[id.xy] **/ damp;
	u[id.xy] += v[id.xy];

	u[id.xy] += (waterLVL - u[id.xy]) / lvlT * dT;

	if (distance((pos / float3(scale.x, scale.y, scale.x) - position) , float3(id.x, 0, id.y)) < radius)
		u[id.xy] = lerp(u[id.xy], grav, .2);

	if (ground[id.xy] > .5)
	{
		u[id.xy] = wall;
		buff[num.y * id.x + id.y].col.w = 1;
	}

	buff[num.y * id.x + id.y].posh.w = u[id.xy];

	DeviceMemoryBarrierWithGroupSync();

	dir[id.xy] = float4(u[Clamper(id.xy + int2(1, 0))] - currX, u[id.xy] - currY, u[Clamper(id.xy + int2(0, 1))] - currZ, 1);
	if (ground[id.xy] > .5)
		dir[id.xy] = 10;
}

[numthreads(1, 1, 1)]
void Pre (uint3 id : SV_DispatchThreadID)
{

}